// heap sort

#include <bits/stdc++.h>
using namespace std;

void heapify(int arr[] , int n , int i){
    int largest = i; // initialize largest with root
    
    int left = 2*i + 1;  // left child of ith node
    int right = 2*i + 2;  // right child of ith node
    
    if( left < n  && arr[left] > arr[largest] )
        largest = left;
    
    if( right < n && arr[right] > arr[largest] )
        largest = right;
        
    if( largest != i ){ // it means that other lagest element was present
        swap( arr[i] , arr[largest] );  // swap them
        heapify(arr,n,largest);   // heapify the rest 
    }      
}


void heap_sort(int *arr , int n){
    // heapify
    for( int i=n/2 -1 ; i>=0 ; i-- ){
        heapify(arr,n,i);
    }
    
    // heap sort
    for( int i=n-1 ; i>=0 ; i--){
        
        swap(arr[0] , arr[i]);  // move max element to last
        
        heapify(arr,i,0);  // heapify remaining elements
    }
    
}

int main()
{
    int arr[5] = {6,9,7,0,4};
    
    heap_sort(arr,5);
    
    for( auto i : arr ){
        cout<<i<<" ";
    }

    return 0;
}
